/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ScoreIndexImport } from './routes/score/index'
import { Route as PlayIndexImport } from './routes/play/index'
import { Route as InstructionIndexImport } from './routes/instruction/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ScoreIndexRoute = ScoreIndexImport.update({
  id: '/score/',
  path: '/score/',
  getParentRoute: () => rootRoute,
} as any)

const PlayIndexRoute = PlayIndexImport.update({
  id: '/play/',
  path: '/play/',
  getParentRoute: () => rootRoute,
} as any)

const InstructionIndexRoute = InstructionIndexImport.update({
  id: '/instruction/',
  path: '/instruction/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/instruction/': {
      id: '/instruction/'
      path: '/instruction'
      fullPath: '/instruction'
      preLoaderRoute: typeof InstructionIndexImport
      parentRoute: typeof rootRoute
    }
    '/play/': {
      id: '/play/'
      path: '/play'
      fullPath: '/play'
      preLoaderRoute: typeof PlayIndexImport
      parentRoute: typeof rootRoute
    }
    '/score/': {
      id: '/score/'
      path: '/score'
      fullPath: '/score'
      preLoaderRoute: typeof ScoreIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/instruction': typeof InstructionIndexRoute
  '/play': typeof PlayIndexRoute
  '/score': typeof ScoreIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/instruction': typeof InstructionIndexRoute
  '/play': typeof PlayIndexRoute
  '/score': typeof ScoreIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/instruction/': typeof InstructionIndexRoute
  '/play/': typeof PlayIndexRoute
  '/score/': typeof ScoreIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/instruction' | '/play' | '/score'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/instruction' | '/play' | '/score'
  id: '__root__' | '/' | '/instruction/' | '/play/' | '/score/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  InstructionIndexRoute: typeof InstructionIndexRoute
  PlayIndexRoute: typeof PlayIndexRoute
  ScoreIndexRoute: typeof ScoreIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InstructionIndexRoute: InstructionIndexRoute,
  PlayIndexRoute: PlayIndexRoute,
  ScoreIndexRoute: ScoreIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/instruction/",
        "/play/",
        "/score/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/instruction/": {
      "filePath": "instruction/index.tsx"
    },
    "/play/": {
      "filePath": "play/index.tsx"
    },
    "/score/": {
      "filePath": "score/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
